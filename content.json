{"meta":{"title":"VNTG 기술블로그","subtitle":"Technical Blog","description":"","author":"VNTG","url":"http://jonggang11.github.io","root":"/"},"pages":[],"posts":[{"title":"Hexo & Gatsby 차이점(주관적)","slug":"hexoVSgatsby","date":"2021-06-03T04:05:46.000Z","updated":"2021-06-03T04:26:42.573Z","comments":true,"path":"hexoVSgatsby/","link":"","permalink":"http://jonggang11.github.io/hexoVSgatsby/","excerpt":"","text":"1. Setup Process Hexo Gatsby 난이도 낮음 난이도 비교적 있음 로딩 속도 빠름 로당속도 느림 2. Developer Experience","categories":[{"name":"Static Site Generator","slug":"Static-Site-Generator","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/"}],"tags":[]},{"title":"Hexo 설치 및 사용 메뉴얼","slug":"hexo","date":"2021-06-03T02:05:46.000Z","updated":"2021-06-03T04:04:29.568Z","comments":true,"path":"hexo/","link":"","permalink":"http://jonggang11.github.io/hexo/","excerpt":"","text":"1.초기설정 Node.js 다운로드 명령프롬프트(Command Line/CLI) 에서 npm install -g hexo-cli 입력1npm install -g hexo-cli Hexo 파일 폴더 생성후 페이지 생성 확인1234hexo init [폴더명]cd [폴더명]npm installhexo server 2. 테마설정(Hueman 테마이용) 해당폴더로 이동후 Hueman 테마를 themes/hueman 폴더로 클론.12cd [폴더명]git clone https:&#x2F;&#x2F;github.com&#x2F;ppoffice&#x2F;hexo-theme-hueman.git themes&#x2F;hueman config.yml 에서 ##Theme 부분을 landscape에서 hueman으로 수정.12## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: hueman themes/hueman 폴더에 있는 _config.yml.example를 _config.yml로 바꿈. 3.커스터마이징 Gatsby 블로그와 유사하게 _config.yml에서 제목 및 저자 수정 가능12345678 # Sitetitle: VNTG 기술블로그 subtitle: Technical Blogdescription: &#39;&#39;keywords:author: VNTGlanguage: entimezone: &#39;&#39; 4. Github에 소스 저장(Push) 새로운 저장소(repo)를 만들고 소스들을 푸쉬해준다. 12345git initgit remote add origin 저장소git add .git commit -m “커밋 메세지”git push origin master 5. Github 페이지에 배포 _config.yml으로 이동후 deploy를 아래 코드와 같이 변경 1234deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;xxxx.github.io.git branch: master 배포를 가능케하는 플러그인 (hexo-deployer-git)을 설치 1npm install --save hexo-deployer-git 정적 리소스를 생성후 배포 12hexo generatehexo deploy Reference","categories":[{"name":"Static Site Generator","slug":"Static-Site-Generator","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/"},{"name":"Hexo","slug":"Static-Site-Generator/Hexo","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/Hexo/"}],"tags":[]},{"title":"Gatsby 설치 및 사용 메뉴얼","slug":"manual","date":"2021-06-03T01:05:46.000Z","updated":"2021-06-03T04:04:22.380Z","comments":true,"path":"manual/","link":"","permalink":"http://jonggang11.github.io/manual/","excerpt":"","text":"Gatsby1.초기설정 Node.js 다운로드 명령프롬프트(Command Line/CLI) 에서 npm install -g gatsby-cli 입력1npm install -g gatsby-cli 템플릿 클론 해당 홈페이지에 많은 템플릿들을 확인후 선택. 템플릿 고르고 github repository 링크를 clone CLI에서 클론한 링크 입력후 페이지 생성 확인 123gatsby new my-project https:&#x2F;&#x2F;xxxxxxxcd my-projectgatsby develop 2.커스터마이징 gatsby-config.js으로 접속후 제목/저자/테마배경컬러등을 바꿀수 있음 123456789options: &#123; name: &#96;VNTG&#96;, short_name: &#96;VNTG&#96;, start_url: &#96;&#x2F;&#96;, background_color: &#96;#f7f0eb&#96;, theme_color: &#96;#a2466c&#96;, display: &#96;standalone&#96;, icon: &quot;static&quot; + settings.meta.iconimage,&#125;, 3.포스트 추가하기 포스트는 우리가 gatsby-config.js 파일에서 별다른 설정을 하지 않았기 때문에 디폴트로 content/posts 디렉터리 내에 만들면 자동으로 블로그 포스트 목록에 표시됨. 템플릿은 똑같이 입력하고 제목이나 slug 추가후 내용삽입하면 완성12345678---template: blog-posttitle: 예시slug: &#x2F;newblogpagedate: 2021-06-03 10:46description: 예시포스트--- 4. Github 배포 GitHub Pages 는 GitHub에서 무료로 호스팅하는 공개 웹페이지.GitHub의 저장소에서 개인이나 조직 또는 프로젝트 페이지를 호스팅하도록 설계됨. GitHub Pages 의 종류는 크게 두가지 개인 사이트 GitHub Pages 프로젝트 사이트 GitHub Pages 개인 사이트는 (username).github.io라는 저장소를 만들게되면 자동으로 개인 사이트를 위한 GitHub Pages를 만들 수 있음. 이 사이트의 저장소 브랜치는 master에서 만들어져야함. 프로젝트 사이트 GitHub에 등록한 프로젝트별로 사이트를 자동으로 만들 수 있음. 프로젝트 사이트는 (username).github.io/[프로젝트 저장소 이름]으로 만들어짐. 사이트의 저장소를 위한 브랜치가 gh-pages라는 브랜치이여야함. 배포방법 github에서 ‘owner이름/owner이름github.io’ repository 생성e.g) https://github.com/배종강/배종강.github.io.git CLI에서 gh-pages 설치 1npm install gh-pages --save-dev package.json에서 gh-pages 코드 추가 12345 &#123; &quot;scripts&quot;: &#123; &quot;deploy&quot;: &quot;gatsby build --prefix-paths &amp;&amp; gh-pages -d public&quot; &#125;&#125; CLI에서 코드를 Github 해당 repo로 push후 배포1234567git initgit remote add origin (github repo 주소)git add .git commit -m &quot;커밋내용&quot;git push -u origin gh-pagesnpm run deploy Reference","categories":[{"name":"Static Site Generator","slug":"Static-Site-Generator","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/"},{"name":"Gatsby","slug":"Static-Site-Generator/Gatsby","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/Gatsby/"}],"tags":[]},{"title":"기존 버전관리 및 CICD 현황","slug":"CICD","date":"2021-06-02T07:05:46.000Z","updated":"2021-06-03T02:01:06.586Z","comments":true,"path":"CICD/","link":"","permalink":"http://jonggang11.github.io/CICD/","excerpt":"","text":"소개: 이 문서는 github, gitlab의 CICD 기능을 테스팅하고 검토하면서 정리한 자료입니다. &nbsp; 선택 : 설치형 vs SaaS (Software as a Service) Gitlab은 모든 타입에서 설치형 지원 Github는 Enterprise 에서만 설치형 지원 IDC나 사내에서 CICD 를 쓸 일이 있으면 필요한 곳에 runner 를 설치하면 가능 &nbsp; Gitlab vs Github 가격비교 table { font-family: arial, sans-serif; border-collapse: collapse; width: 100%; } td, th { border: 2px solid #000000; background-color: white; text-align: left; padding: 8px; } tr:nth-child(even) { background-color: white; } Gitlab Github https://about.gitlab.com/pricing/ https://github.com/pricing Free Free Premium : 1인당 월$19*12= 년 $228 Team : 1인당 월 $4*12 = 년 $48 Ultimate : 1인당 월$99*12=년 $1188 Enterprise : 1인당 월 $21*12 = 년 $252 &nbsp; Gitlab vs Github 기능 비교타입별 기능 비교:Free 버전에서는 git 사용을 위한 기본적인 기능만 지원을 하며 기술지원 없음PR(MR) 요청을 했을 때 리뷰어를 두고 승인하는 기능은 Free 버전에는 없으며 Gitlab Premium이나 Github Team을 써야 함Gitlab Ultimate, Github Enterprise 는 주로 보안과 관련한 기능 추가 일반적인 기능은 비슷하게 지원이 됨 버전관리 프로젝트관리(wiki, issues) 패키지기능(npm, RubyGems, Apache Maven, Gradle, Docker, and NuGet, docker) CICD API 연동 Gitlab은 CICD 기능 외에 다양한 부가 기능을 지원 Monitor application 퍼포먼스 메트릭으로 신뢰성 및 안정성 측정 경고 및 사고 관리 애플리케이션의 오류 추적 애플리케이션 상태 및 성능 추적 로그 집계 및 저장 코드로 인프라 관리 (terraform remote backend) k8s 통합기능 테스팅과 관련한 각종 툴이 통합 : 단위테스트 보고서, 접근성 테스트, 브라우저 성능 테스트, 코드 품질, 부하 성능 테스트, 메트릭 레포트 Unit 테스트 리포트 Gitlab에서는 여러 가지 부가기능을 많이 지원하지만 Github 에서는 다른 대체수단을 이용하여 처리할 수 있을 것으로 생각됨 terraform remote backend 는 AWS 에서 S3+dynamoDB 와 연동하여 처리 가능 k8s는 Flux 나 Argo CD 등을 이용 CICD는 Github 에서 Github actions 를 지원하면서 큰 차이가 없음 Github marketplace 에서 필요한 것을 찾거나 직접 만들어서 사용 하면 됨 Gitlab, Github CICD 예제 Gitlab CI/CD 예제 Github 액션 가이드 Gitlab CICD의 장점은 environments 를 이용하여 각 환경(staging, prod)에 대한 배포를 손쉽게 하고 기록을 확인가능한 점 Github 은 environmentsenvironments 기능을 public repo나 enterprise plan 일 경우에만 지원하고 github team 의 private repo에는 지원 안함 Github 에서 environments 기능은 리뷰어의 승인 이 있어야 배포 가능/트리거 발생후 일정 시간이 지나야 배포 가능/특정 브랜치만 배포 가능 &nbsp; Github 구성 IDC에서 CICD를 하는 경우에는 IDC에 윈도우용 runner, LInux runner 구성 AWS 를 이용하는 경우에는 소스코드 관리는 Github로 하되 AWS CodePipeline 를 이용할 수도 있음. 소스코드링크 Github Actions Quickstart 에서 간단한 github actions 직접 만들어서 해봄. 액션링크 Guides 에서 주로 사용하는 언어를 골라서 build, test, deploy 하는 예제를 살펴본다. 액션가이드 Github Actions 배우기 Learn GitHub Actions : github actions 를 이용하여 workflow 를 만드는 방법을 상세히 설명. 액션배우기 Github actions 과정에 대한 설명, actions 찾기, 조직과 워크플로우 공유하기, 보안 등을 다루고 있음. Github Actions 만들기 Actions는 jobs을 만들고 workflow를 구성하는 개별 작업으로 자신이 직접 만들거나 github 커뮤니티에서 다른 사람들이 만든 것을 이용할 수 있다. 자세히 Actions는 3가지 타입으로 만들 수 있으며 Docker container, JavaScript, Composite run steps 가 있다. 자세히 Docker container 는 리눅스만 지원한다. JavaScript는 runner 에서 실행이 되며 “JavaScript 작업을 사용하면 작업 코드가 단순화되고 Docker 컨테이너 작업보다 빠르게 실행됩니다.” 라고 문서에 나와있다. Composite run steps 는 쉘스크립트를 이용하여 처리하는 경우로 Docker container, JavaScript 보다는 뒤에 기능이 추가가 되었다. Reference Encrypted secrets : 암호화된 비밀정보. workflow 파일에서 input 이나 environment 변수로 받아서 사용할 수 있음.자세히 Environments 를 이용하면 배포시 몇가지 제한을 걸 수 있다. 리뷰어의 승인이 있어야 배포 가능, 트리거 발생후 일정 시간이 지나야 배포 가능, 특정 브랜치만 배포 가능. 그런데 이 기능은 공개 repo이거나 enterprise plan 일 경우에만 지원을 하고 github team 의 private repo에는 아직 지원 안함. 자세히 Environments 를 이용한 예제 Pull Request 상태 일 때만 Dev에 배포 메인에 커밋하거나 병합 할 때만 스테이징에 배포 스테이징 후 승인을 받아 프로덕션에 배포 Github Actions 제한자세히 Job execution time : 6시간Workflow run time : 72 hours Github self-hosted runnersGithub runner 설치 및 등록Repository 또는 organization 차원에서 runner 를 등록할 수 있음. 자세히 runner 를 추가하는 화면에서 runner를 설치하고 설정하는 부분에 대한 설명이 나옴. 설치시 root로 진행을 하면 sudo 관련한 에러가 나옴. 보안을 위해서 별도 user를 만들어서 runner를 실행함. runner 를 실행할 user를 만들고 docker 를 사용하기 위해서 docker group에 추가를 해준다. 123useradd -m -s &#x2F;bin&#x2F;bash --comment &#39;github runner&#39; github-runnerusermod -aG docker github-runnersudo su - github-runner Github-runner user로 runner 설치. 설정을 할 때 나오는 url과 token 정보를 이용:1234$ mkdir actions-runner &amp;&amp; cd actions-runner$ curl -o actions-runner-linux-x64-2.278.0.tar.gz -L https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;runner&#x2F;releases&#x2F;download&#x2F;v2.278.0&#x2F;actions-runner-linux-x64-2.278.0.tar.gz$ tar xzf .&#x2F;actions-runner-linux-x64-2.278.0.tar.gz.$ &#x2F;config.sh --url https:&#x2F;&#x2F;github.com&#x2F;VntgCorp --token ATZHRXXXXXXXX 아래는 root 권한으로 실행을 해야 함. systemd 설정을 하며 실행하는 사용자를 지정하는 것임:123# .&#x2F;svc.sh install github-runner# .&#x2F;svc.sh start# .&#x2F;svc.sh status Self-hosted runners 를 github actions에 추가할 때 자동으로 self-hosted, 운영 체제 및 하드웨어 플랫폼 레이블이 설정 된다. 필요하면 추가 레이블을 설정할 수 있다. 예를 들어 x86_64 ubuntu 20.04 의 경우 self-hosted, linux, X64 로 나온다. 보안 문제로 public repo의 경우에는 기본적으로 organization에 있는 runner group 을 사용할 수 없다.자세히 workflow 에서 runner 사용: 자세히 runs-on: [self-hosted, linux, X64]. workflow에서 runner에 할당한 레이블을 넣으면 됨. (and 조건임) Github actions 기타 참고자료 Docker registry, container registry자세히 123$ docker login https:&#x2F;&#x2F;docker.pkg.github.com -u tjmoon-vntg$ docker build -t docker.pkg.github.com&#x2F;tjmoon-vntg&#x2F;action_test&#x2F;docker_test:1.0 .$ docker push docker.pkg.github.com&#x2F;tjmoon-vntg&#x2F;action_test&#x2F;docker_test:1.0 현재는 package namespace 를 사용하는 Docker registry 를 지원하고 있는데 향후에는 Container Registry 로 대체를 할 것이라고 함. Container Registry 는 사용자 또는 조직에 대해서 설정을 하며 아직은 베타버전임. 자세히 &nbsp; Gitlab 구성 Gitlab runner 설치 및 등록Runner type : shared runners, group runners, specific runners OS에 gitlab-runner 설치.executor 가 여러 가지 있는데 docker 를 추천하고 있음. OS에 docker 설치.gitlab-runner 설치 후 runner 를 등록함. executor docker로 실행시 gitlab.example.com 을 찾지 못함. 12345678910111213REGISTRATION_TOKEN&#x3D;gCGg8tkK51TATVpjsBHzsudo gitlab-runner register \\ --non-interactive \\ --url http:&#x2F;&#x2F;gitlab.example.com&#x2F; \\ --registration-token $REGISTRATION_TOKEN \\ --executor &quot;docker&quot; \\ --docker-image alpine:latest \\ --description &quot;docker-runner&quot; \\ --tag-list &quot;docker,aws&quot; \\ --run-untagged&#x3D;&quot;true&quot; \\ --locked&#x3D;&quot;false&quot; \\ --access-level&#x3D;&quot;not_protected&quot; extra_hosts 옵션을 추가해서 docker 에서 /etc/hosts를 업데이트할 수 있음.extra_hosts = [“other-host:127.0.0.1”] 자세히 123456789101112131415161718192021cat &gt; &#x2F;tmp&#x2F;test-config.template.toml &lt;&lt; EOF[[runners]]name &#x3D; &quot;docker-runner&quot;[runners.docker]extra_hosts &#x3D; [&quot;gitlab.example.com:192.168.33.12&quot;]EOFREGISTRATION_TOKEN&#x3D;gCGg8tkK51TATVpjsBHzsudo gitlab-runner register \\ --non-interactive \\ --url http:&#x2F;&#x2F;gitlab.example.com&#x2F; \\ --registration-token $REGISTRATION_TOKEN \\ --executor &quot;docker&quot; \\ --docker-image alpine:latest \\ --description &quot;docker-runner&quot; \\ --tag-list &quot;docker,aws&quot; \\ --run-untagged&#x3D;&quot;true&quot; \\ --locked&#x3D;&quot;false&quot; \\ --access-level&#x3D;&quot;not_protected&quot; \\ --template-config &#x2F;tmp&#x2F;test-config.template.toml shell로 등록시 아래 에러가 나왔음. gitlab-runner verify 명령으로 처리.‘New runner. Has not connected yet.’ 에러 CICD pipeline stage 는 정의를 하지 않으면 기본으로 5가지가 사용된다. (pre, build, test, deploy, post)자세히 runner 에서 동시작업을 하려고 하면 gitlab-runner에서 concurrent 옵션을 바꾸어준다. 기본은 1로 되어 있다. 이 부분을 바꾸어 주어야 여러개의 job을 동시에 실행할 수 있다. 자세히 pipeline이 성공했을 때만 Merge하는 기능은 유용할 듯. ssh 이용하는 경우 다음 내용 참고. 자세히 environments 이용하여 배포 기록 남기고 과거 버전으로 롤백 할 수 있음. 기타, 다른 툴과 연동terraform 의 remote state 를 저장하는 용도로 사용 가능함. terraform을 여러 명이 함께 사용을 하는 경우 필요한 기능임. 자세히 https://docs.gitlab.com/ee/administration/terraform_state.html Github, Gitlab CICD environments 기능 비교gitlab environments 예제environment 를 활용하는 간단한 예제이다. (.gitlab-ci.yml) 사전에 environment 에 staging, production 을 구성한다. 소스코드가 업데이트되면 ubuntu:20.04 docker 컨테이너에서 실행이 되며 staging 은 ssh를 이용하여 자동 배포가 된다. production 에는 수동으로 배포를 하도록 구성을 했다. (manual) 수동으로 배포를 할 수 있는 사람도 지정할 수 있다. 자세히 이제 environment 로 가면 staging, production 환경별로 배포한 기록을 볼 수 있고 특정 commit 으로 롤백을 할 수도 있다. 1234567891011121314151617181920212223242526272829303132image: ubuntu:20.04before_script: - apt-get update - &#39;which ssh-agent || apt-get install openssh-client -y&#39; - mkdir -p ~&#x2F;.ssh - eval $(ssh-agent -s) - &#39;[[ -f &#x2F;.dockerenv ]] &amp;&amp; echo -e &quot;Host *\\n\\tStrictHostKeyChecking no\\n\\n&quot; &gt; ~&#x2F;.ssh&#x2F;config&#39;deploy-staging: stage: deploy script: - echo &quot;staging, This job deploys something from the $CI_COMMIT_BRANCH branch.&quot; - ssh-add &lt;(echo &quot;$STAGING_PRIVATE_KEY&quot;) - ssh -p22 test@192.168.33.14 &quot;mkdir -p test&quot; - ssh -p22 test@192.168.33.14 &quot;date ; touch a.txt&quot; - scp -P22 * test@192.168.33.14:test&#x2F; - scp -P22 index.html test@192.168.33.14:&#x2F;var&#x2F;www&#x2F;html&#x2F;index.html environment: name: staging url: http:&#x2F;&#x2F;staging.example.comdeploy-production: stage: deploy script: - echo &quot;prd , This job deploys something from the $CI_COMMIT_BRANCH branch.&quot; environment: name: production url: http:&#x2F;&#x2F;www.example.com when: manual only: - master &nbsp; Gitlab pipeline &nbsp; Gitlab environments &nbsp; Gitlab staging &nbsp; github environments 예제Github 은 environments 기능을 public repo나 enterprise plan 일 경우에만 지원하고 github team 의 private repo에는 지원 안함Github 에서 environments 기능은 리뷰어의 승인이 있어야 배포 가능/트리거 발생후 일정 시간이 지나야 배포 가능/특정 브랜치만 배포 가능https://docs.github.com/en/actions/reference/environments 아래 github workflow 파일은 다음과 같은 내용을 담고 있다. 사전에 production environments 에 Required reviewers 설정을 함. Pull Request 상태 일 때만 Dev에 배포 메인에 커밋하거나 병합 할 때만 스테이징에 배포 스테이징 후 승인을 받아 프로덕션에 배포. 해당 environments 의 Required reviewers 가 승인을 해 주어야 배포가 됨. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# https:&#x2F;&#x2F;dev.to&#x2F;n3wt0n&#x2F;everything-you-need-to-know-about-github-actions-environments-9p7name: CI + CDon: push: branches: [ main ] pull_request: branches: [ main ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch:jobs: Build: runs-on: ubuntu-latest steps: - uses: actions&#x2F;checkout@v2 - name: Compile run: echo Hello, world! DeployDev: name: Deploy to Dev if: github.event_name &#x3D;&#x3D; &#39;pull_request&#39; needs: [Build] runs-on: ubuntu-latest environment: name: Development url: &#39;http:&#x2F;&#x2F;dev.example.com&#39; steps: - name: Deploy run: echo I am deploying! DeployStaging: name: Deploy to Staging if: github.event.ref &#x3D;&#x3D; &#39;refs&#x2F;heads&#x2F;main&#39; needs: [Build] runs-on: ubuntu-latest environment: name: Staging url: &#39;http:&#x2F;&#x2F;staging.example.com&#x2F;&#39; steps: - name: Deploy run: echo I am deploying! DeployProd: name: Deploy to Production needs: [DeployStaging] runs-on: ubuntu-latest environment: name: Production url: &#39;http:&#x2F;&#x2F;www.example.com&#39; steps: - name: Deploy run: echo I am deploying! &nbsp; Github dev &nbsp; Github staging &nbsp; Github staging-log","categories":[{"name":"CICD","slug":"CICD","permalink":"http://jonggang11.github.io/categories/CICD/"}],"tags":[]},{"title":"Git의 대표적인 3가지 workflow","slug":"Git","date":"2021-05-31T06:05:46.000Z","updated":"2021-06-03T02:44:01.507Z","comments":true,"path":"Git/","link":"","permalink":"http://jonggang11.github.io/Git/","excerpt":"","text":"Gitflow / Github flow / Gitlab flow 개발언어(특히나 JavaScript관련)만큼 변화가 많은건 아니지만, Version Control System도 긴 역사끝에 현재는 Git의 전성기가 되었습니다. VCS로 Git을 도입함에 따라(Gitlab/Github의 결정이 남아있지만) 어떤 workflow를 도입할지도 결정이 필요합니다. 대표적인 3가지 workflow의 특징을 간략하게 정리합니다. Gitflow 5개로 가장 많은 branch가 존재하며 그만큼 복잡도가 높음 table { font-family: arial, sans-serif; border-collapse: collapse; width: 100%; } td, th { border: 2px solid #000000; background-color: white; text-align: left; padding: 8px; } tr:nth-child(even) { background-color: white; } Feature Develop Release Hotfix Master 임시 기반 임시 임시 기반 Master 중심이 되는 2개의 branch 중 하나. 최종 릴리즈에 사용되는 branch로 태깅을 통해 버전관리 Develop 중심이 되는 또다른 branch. 차기 릴리즈를 위한 개발의 메인으로 추가 기능 개발시 Develop에서 Feature branch를 생성. 개발이 완료된 기능은 Develop branch로 merge Feature Feature branch는 origin에 반영되는게 아닌, 개발자의 repo에 존재 Merge가 완료되면 branch는 삭제 Release기능개발이 완료되어 차기 릴리즈를 위한 준비가 되면 Develop branch에서 생성 이 시점부터 Develop branch에는 차차기 릴리즈를 위한 개발이 가능 Release branch에는 버그픽스를 위한 수정만 커밋되고, 버그픽스가 완료되면 Master branch, Developer branch의 두곳에 merge Master branch에 tagging을 통해 릴리즈버전을 기록 HotfixProduction환경에서 버그가 발생하면 Master branch에서 생성.수정 완료 후 Master branch, Developer branch의 두곳에 merge Master branch에 tagging을 통해 핫픽스 릴리즈버전을 기록 Release branch가 있다면 해당 branch에도 merge 필요 GitFlow는 실제 운용이 복잡 Github flow Master (작업용branch) 기반 임시 Master branch만 stable 하다면, 작업용 임시 branch에 대해서는 특별한 규칙이 없는 방식Develop branch가 따로 존재하지 않으며, Feature와 Hotfix 등 모든게 Master branch에서 생성되고 작업완료 후 Master branch로 merge됨 merge할때 무조건 pull request가 필요하며, 코드에 대한 다른 개발자의 리뷰를 통해 master 이렇다보니 CI는 선택이 아닌 필수 Master branch로 merge시 즉시 배포까지 이어지게 구성되어야 한다 배포가 자동화 되어있지 않은 상황에서 도입은 현실적으로 어렵다 Gitlab flow table { } td, th { border: 2px solid #dddddd; text-align: left; padding: 8px;} tr:nth-child(even) { background-color: white;} Master Pre-production Production 기반 기반 기반 &nbsp; Gitlab에서는 하나가 아닌 몇가지 flow를 제시하고 있는데, 그중 대표적인 Environment branches with Gitlab flow를 리뷰 Gitlab의 Production branch는 Gitflow의 Master branch 역할과 동일Pre-production branch는 Master → Production으로 바로 반영하지 않고 staging과 production의 중간버퍼 단계로 추가됨 Gitlab의 Master branch는 Pre-production branch, Production branch로 일방적인 deploy 만 진행 Master branch는 계속 변화가 가능","categories":[{"name":"Git","slug":"Git","permalink":"http://jonggang11.github.io/categories/Git/"}],"tags":[]}],"categories":[{"name":"Static Site Generator","slug":"Static-Site-Generator","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/"},{"name":"Hexo","slug":"Static-Site-Generator/Hexo","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/Hexo/"},{"name":"Gatsby","slug":"Static-Site-Generator/Gatsby","permalink":"http://jonggang11.github.io/categories/Static-Site-Generator/Gatsby/"},{"name":"CICD","slug":"CICD","permalink":"http://jonggang11.github.io/categories/CICD/"},{"name":"Git","slug":"Git","permalink":"http://jonggang11.github.io/categories/Git/"}],"tags":[]}